/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.OrderItem;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-02-12T09:59:57.847217-05:00[America/New_York]")
@Validated
@Api(value = "orderitem", description = "the orderitem API")
public interface OrderitemApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /orderitem : Add a orderitem
     *
     * @param orderItem Order to create (required)
     * @return Successfully created orderitem (status code 200)
     *         or Invalid input (status code 405)
     */
    @ApiOperation(value = "Add a orderitem", nickname = "addOrderItem", notes = "", response = OrderItem.class, tags={ "orderitem", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully created orderitem", response = OrderItem.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @PostMapping(
        value = "/orderitem",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<OrderItem> addOrderItem(@ApiParam(value = "Order to create" ,required=true )  @Valid @RequestBody OrderItem orderItem) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quantity\" : 5, \"price\" : 5, \"product_id\" : 1, \"id\" : 0, \"order_id\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /orderitem/{orderitemId} : Delete a orderitem
     *
     * @param orderitemId ID of orderitem to delete (required)
     * @return Invalid orderitem value (status code 400)
     */
    @ApiOperation(value = "Delete a orderitem", nickname = "deleteOrderItem", notes = "", tags={ "orderitem", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid orderitem value") })
    @DeleteMapping(
        value = "/orderitem/{orderitemId}"
    )
    default ResponseEntity<Void> deleteOrderItem(@ApiParam(value = "ID of orderitem to delete",required=true) @PathVariable("orderitemId") Long orderitemId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /orderitem/{orderitemId} : Return a single orderitem
     *
     * @param orderitemId ID of orderitem to return (required)
     * @return A JSON representation of a orderitem (status code 200)
     *         or Invalid orderitem ID (status code 400)
     *         or OrderItem not found (status code 404)
     */
    @ApiOperation(value = "Return a single orderitem", nickname = "getOrderItemById", notes = "", response = OrderItem.class, tags={ "orderitem", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A JSON representation of a orderitem", response = OrderItem.class),
        @ApiResponse(code = 400, message = "Invalid orderitem ID"),
        @ApiResponse(code = 404, message = "OrderItem not found") })
    @GetMapping(
        value = "/orderitem/{orderitemId}",
        produces = { "application/json" }
    )
    default ResponseEntity<OrderItem> getOrderItemById(@ApiParam(value = "ID of orderitem to return",required=true) @PathVariable("orderitemId") Long orderitemId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quantity\" : 5, \"price\" : 5, \"product_id\" : 1, \"id\" : 0, \"order_id\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /orderitem : Update a orderitem
     *
     * @param orderItem Order to create (required)
     * @return Successfully updated orderitem (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or OrderItem not found (status code 404)
     *         or Invalid input (status code 405)
     */
    @ApiOperation(value = "Update a orderitem", nickname = "updateOrderItem", notes = "", response = OrderItem.class, tags={ "orderitem", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully updated orderitem", response = OrderItem.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "OrderItem not found"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @PutMapping(
        value = "/orderitem",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<OrderItem> updateOrderItem(@ApiParam(value = "Order to create" ,required=true )  @Valid @RequestBody OrderItem orderItem) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quantity\" : 5, \"price\" : 5, \"product_id\" : 1, \"id\" : 0, \"order_id\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Category;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-02-12T09:59:57.847217-05:00[America/New_York]")
@Validated
@Api(value = "category", description = "the category API")
public interface CategoryApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /category : Add a category
     *
     * @param category Order to create (required)
     * @return Successfully created category (status code 200)
     *         or Invalid input (status code 405)
     */
    @ApiOperation(value = "Add a category", nickname = "addCategory", notes = "", response = Category.class, tags={ "category", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully created category", response = Category.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @PostMapping(
        value = "/category",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Category> addCategory(@ApiParam(value = "Order to create" ,required=true )  @Valid @RequestBody Category category) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /category/{categoryId} : Delete a category
     *
     * @param categoryId ID of category to delete (required)
     * @return Invalid category value (status code 400)
     */
    @ApiOperation(value = "Delete a category", nickname = "deleteCategory", notes = "", tags={ "orderitem", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid category value") })
    @DeleteMapping(
        value = "/category/{categoryId}"
    )
    default ResponseEntity<Void> deleteCategory(@ApiParam(value = "ID of category to delete",required=true) @PathVariable("categoryId") Long categoryId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /category/{categoryId} : Return a single category
     *
     * @param categoryId ID of category to return (required)
     * @return A JSON representation of a category (status code 200)
     *         or Invalid category ID (status code 400)
     *         or Category not found (status code 404)
     */
    @ApiOperation(value = "Return a single category", nickname = "getCategoryById", notes = "", response = Category.class, tags={ "category", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A JSON representation of a category", response = Category.class),
        @ApiResponse(code = 400, message = "Invalid category ID"),
        @ApiResponse(code = 404, message = "Category not found") })
    @GetMapping(
        value = "/category/{categoryId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Category> getCategoryById(@ApiParam(value = "ID of category to return",required=true) @PathVariable("categoryId") Long categoryId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /category : Update a category
     *
     * @param category Order to create (required)
     * @return Successfully updated category (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Category not found (status code 404)
     *         or Invalid input (status code 405)
     */
    @ApiOperation(value = "Update a category", nickname = "updateCategory", notes = "", response = Category.class, tags={ "category", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully updated category", response = Category.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Category not found"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @PutMapping(
        value = "/category",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Category> updateCategory(@ApiParam(value = "Order to create" ,required=true )  @Valid @RequestBody Category category) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

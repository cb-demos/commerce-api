openapi: 3.0.0
info:
  title: Commerce API
  description: This is the main backend component for the commerce demo application.
  version: 0.1.0

paths:
  /products:
    get:
      summary: Return a list of products
      operationId: listProducts
      tags:
        - products
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A JSON array of products
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /product:
    post:
      summary: Add a product
      operationId: addProduct
      tags:
        - product
      requestBody:
        $ref: "#/components/schemas/Product"
      responses:
        200:
          description: Successfully created product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        405:
          description: Invalid input
    put:
      summary: Update a product
      operationId: updateProduct
      tags:
        - product
      requestBody:
        $ref: "#/components/schemas/Product"
      responses:
        200:
          description: Successfully updated product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          description: Invalid ID supplied
        404:
          description: Product not found
        405:
          description: Invalid input
  /product/{productId}:
    get:
      summary: Return a single product
      operationId: getProductById
      tags:
        - product
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A JSON representation of a product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          description: Invalid product ID
        404:
          description: Product not found
    delete:
      tags:
        - product
      summary: Delete a product
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: ID of product to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid product value
  /orders:
    get:
      summary: Return a list of orders
      operationId: listOrders
      tags:
        - orders
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A JSON array of orders
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /order:
    post:
      summary: Add a order
      operationId: addOrder
      tags:
        - order
      requestBody:
        $ref: "#/components/schemas/Order"
      responses:
        200:
          description: Successfully created order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        405:
          description: Invalid input
    put:
      summary: Update a order
      operationId: updateOrder
      tags:
        - order
      requestBody:
        $ref: "#/components/schemas/Order"
      responses:
        200:
          description: Successfully updated order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
        405:
          description: Invalid input
  /order/{orderId}:
    get:
      summary: Return a single order
      operationId: getOrderById
      tags:
        - order
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A JSON representation of a order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        400:
          description: Invalid order ID
        404:
          description: Order not found
    delete:
      tags:
        - order
      summary: Delete a order
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid order value
  /orderitems:
    get:
      summary: Return a list of order items
      operationId: listOrderItems
      tags:
        - orderitems
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A JSON array of order items
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderItems"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /orderitem:
    post:
      summary: Add a orderitem
      operationId: addOrderItem
      tags:
        - orderitem
      requestBody:
        $ref: "#/components/schemas/OrderItem"
      responses:
        200:
          description: Successfully created orderitem
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderItem"
        405:
          description: Invalid input
    put:
      summary: Update a orderitem
      operationId: updateOrderItem
      tags:
        - orderitem
      requestBody:
        $ref: "#/components/schemas/OrderItem"
      responses:
        200:
          description: Successfully updated orderitem
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderItem"
        400:
          description: Invalid ID supplied
        404:
          description: OrderItem not found
        405:
          description: Invalid input
  /orderitem/{orderitemId}:
    get:
      summary: Return a single orderitem
      operationId: getOrderItemById
      tags:
        - orderitem
      parameters:
        - name: orderitemId
          in: path
          description: ID of orderitem to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A JSON representation of a orderitem
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderItem"
        400:
          description: Invalid orderitem ID
        404:
          description: OrderItem not found
    delete:
      tags:
        - orderitem
      summary: Delete a orderitem
      operationId: deleteOrderItem
      parameters:
        - name: orderitemId
          in: path
          description: ID of orderitem to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid orderitem value
  /categories:
    get:
      summary: Return a list of categories
      operationId: listCategories
      tags:
        - categories
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A JSON array of categories
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Categories"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /category:
    post:
      summary: Add a category
      operationId: addCategory
      tags:
        - category
      requestBody:
        $ref: "#/components/schemas/Category"
      responses:
        200:
          description: Successfully created category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        405:
          description: Invalid input
    put:
      summary: Update a category
      operationId: updateCategory
      tags:
        - category
      requestBody:
        $ref: "#/components/schemas/Category"
      responses:
        200:
          description: Successfully updated category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        400:
          description: Invalid ID supplied
        404:
          description: Category not found
        405:
          description: Invalid input
  /category/{categoryId}:
    get:
      summary: Return a single category
      operationId: getCategoryById
      tags:
        - category
      parameters:
        - name: categoryId
          in: path
          description: ID of category to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A JSON representation of a category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        400:
          description: Invalid category ID
        404:
          description: Category not found
    delete:
      tags:
        - orderitem
      summary: Delete a category
      operationId: deleteCategory
      parameters:
        - name: categoryId
          in: path
          description: ID of category to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid category value

components:
  schemas:
    Product:
      type: object
      required:
        - id
        - name
        - image_url
        - description
        - price
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        category_id:
          type: integer
          format: int64
        image_url:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
    Products:
      type: array
      items:
        $ref: "#/components/schemas/Product"
    Order:
      type: object
      required:
        - id
        - user_id
        - timestamp
        - shipping_price
        - discount
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        timestamp:
          type: string
        shipping_price:
          type: integer
          format: int64
        discount:
          type: integer
          format: int64
    Orders:
      type: array
      items:
        $ref: "#/components/schemas/Order"
    OrderItem:
      type: object
      required:
        - id
        - order_id
        - product_id
        - price
        - quantity
      properties:
        id:
          type: integer
          format: int64
        order_id:
          type: integer
          format: int64
        product_id:
          type: integer
          format: int64
        price:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int64
    OrderItems:
      type: array
      items:
        $ref: "#/components/schemas/OrderItem"
    Category:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Categories:
      type: array
      items:
        $ref: "#/components/schemas/Category"

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  requestBodies:
    Product:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Product"
      description: Product to add to the store
      required: true
    Order:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Order"
      description: Order to create
      required: true
    OrderItem:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderItem"
      description: Order to create
      required: true
    Category:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Category"
      description: Order to create
      required: true

